version: '3.8'

services:
  # MongoDB Service
  mongo_srv:
    image: mongo:latest
    container_name: mongo_srv
    restart: unless-stopped
    ports:
     - "57017:27017"
    environment:
      MONGO_INITDB_DATABASE: HarshaEcomOrderMgmtDB
    volumes:
      - ./_db-init/mongo-init-db:/docker-entrypoint-initdb.d:ro
      - mongo_data:/data/db
    networks:
      - order-mongo-net

  # MySQL Service
  mysql_srv:
    image: mysql:latest
    container_name: mysql_srv
    restart: unless-stopped
    ports:
      - "53306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: Zia@123456
      MYSQL_DATABASE: HarshaEcomProdMgmtDB
    volumes:
      - ./_db-init/mysql-init-db:/docker-entrypoint-initdb.d:ro
      - mysql_data:/var/lib/mysql
    networks:
      - product-mysql-net

  # PostgreSQL Service
  postgres_srv:
    image: postgres:latest
    container_name: postgres_srv
    restart: unless-stopped
    ports:
      - "55432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Zia@123456
      POSTGRES_DB: HarshaEcomUserMgmtDB
    volumes:
      - ./_db-init/postgres-init-db:/docker-entrypoint-initdb.d:ro
      - postgres_data:/var/lib/postgresql/data
    networks:
      - user-postgres-net

  # Redis Cache 
  redis_srv:
    image: redis:latest
    container_name: redis_cnt
    ports:
      - "56379:6379"
    volumes:
      - ./_redis:/data
    # command: redis-server --appendonly yes
    networks:
      - ecom-net
    restart: unless-stopped
  
  # RabbitMQ
  rabbitmq_srv:
    image: rabbitmq:3-management
    container_name: rabbitmq_cnt
    ports:
      - "55672:5672"    # AMQP protocol port
      - "55673:15672"  # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ecom-net

  # Order Management API
  ordermgmt.api:
    image: ordermgmt:latest
    build:
      context: .
      dockerfile: OrderMgmt.API/Dockerfile
    container_name: orderMgmt_cnt
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTP_PORTS=8080
      - MONGODB_HOST=mongo_srv
      - MONGODB_PORT=27017
      - MONGODB_DATABASE=HarshaEcomOrderMgmtDB
      - ProductMgmt_Host=productmgmt.api
      - ProductMgmt_Port=8080
      - UserMgmt_Host=usermgmt.api
      - UserMgmt_Port=8080
      - REDIS_HOST=redis_srv
      - REDIS_PORT=6379
    ports:
      - "46100:8080"
    networks:
      - order-mongo-net
      - ecom-net
    depends_on:
      - mongo_srv

  # Product Management API
  productmgmt.api:
    image: productmgmt:latest
    build:
      context: .
      dockerfile: ProductMgmt.API/Dockerfile
    container_name: productMgmt_cnt
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTP_PORTS=8080
      - MYSQL_HOST=mysql_srv
      - MYSQL_PORT=3306
      - MYSQL_DB=HarshaEcomProdMgmtDB
      - MYSQL_USER=root
      - MYSQL_PASSWD=Zia@123456
      - RabbitMQ_HostName=rabbitmq_srv
      - RabbitMQ_Port=5672
      - RabbitMQ_UserName=guest
      - RabbitMQ_Password=guest
      - RabbitMQ_ExchangeName=direct_exchange
    ports:
      - "46101:8080"
    networks:
      - product-mysql-net
      - ecom-net
    depends_on:
      - mysql_srv

  # User Management API
  usermgmt.api:
    image: usermgmt:latest
    build:
      context: .
      dockerfile: UserMgmt.API/Dockerfile
    container_name: userMgmt_cnt
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTP_PORTS=8080
      - POSTGRES_HOST=postgres_srv
      - POSTGRES_PORT=5432
      - POSTGRES_DB=HarshaEcomUserMgmtDB
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWD=Zia@123456
    ports:
      - "46102:8080"
    networks:
      - user-postgres-net
      - ecom-net
    depends_on:
      - postgres_srv

networks:
  order-mongo-net:
    driver: bridge
  product-mysql-net:
    driver: bridge
  user-postgres-net:
    driver: bridge
  ecom-net:
    driver: bridge

volumes:
  mongo_data:
  mysql_data:
  postgres_data:
  rabbitmq_data:  